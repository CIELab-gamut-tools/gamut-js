import{mult as t,from as e,rows as a,diag as n,mapMany as r,div as o,grid as s,reshape as i,zeros as l,mcat as f,min as p,max as g,cross as c,sum as m,product as u,vcat as h,cumsum as d,gridInterp1 as w}from"t-matrix";function M(t){const e=(t=[...t]).length;let[a,n]=s(t,t);a=i(a,e*e,1),n=i(n,e*e,1);const r=l(e*e,1).set(t[0]),o=l(e*e,1).set(t[e-1]),p=f([[r,a,n],[n,r,a],[a,n,r],[o,n,a],[a,o,n],[n,a,o]]),g=l(12*(e-1)*(e-1),3);let c=0;for(let t=0;t<6;t++)for(let a=0;a<e-1;a++)for(let n=0;n<e-1;n++){let r=e*e*t+e*a+n;g.set([c,c+1],":",[[r,r+e,r+1],[r+e,r+e+1,r+1]]),c+=2}return[g,p]}function R(t,n){const r=e([...a(t)].map(([t,e])=>[t/e,1,(1-t-e)/e]));return n?product(r,n):r}function A(t){const e={},a=function*(t){if(null!=t){"string"!=typeof t&&"function"==typeof t[Symbol.iterator]||(t=[t]);for(let e of t)if("string"==typeof e)for(let t of e.match(/[^\r\n]+/g))yield t.split("#")[0]}}(t)[Symbol.iterator]();let n,r,o,s,i;const f=()=>(n=a.next()).done;for(;!f();){const[t,...a]=n.value.split(/\s+/);if(/^CGATS/.test(t))e.version=t;else switch(t){case"BEGIN_DATA_FORMAT":for(o=[];!f()&&"END_DATA_FORMAT"!==n.value;)o.push(...n.value.toUpperCase().split(/\s+/));break;case"NUMBER_OF_SETS":r=Number.parseInt(a[0]);break;case"BEGIN_DATA":if(!r||!o)throw new Error("readCGATS: NUMBER_OF_SETS and *_DATA_FORMAT required before BEGIN_DATA");s=l(r,o.length),i=0;let p=o.indexOf("SAMPLEID");for(-1===p&&(p=o.indexOf("SAMPLE_ID")),-1===p&&(p=o.indexOf("SAMPLE_NO"));!f()&&"END_DATA"!==n.value;){const t=n.value.split(/\s+/).map(Number.parseFloat);if(p>=0){if(i=t[p],i<1||i>r)throw new Error("readCGATS: SampleID outside the range 1..NUMBER_OF_SETS");s.set(i-1,":",[t])}else s.set(i++-1,":",[t])}if(i!==r)throw new Error("readCGATS: data rows does not match NUMBER_OF_SETS");e.format={};for(let t=0;t<o.length;t++)e.format[o[t]]=t;e.data=s;break;default:e[t]=a.join(" ")}}return e}function B(t,e){const a=A(t),n=["RGB_R","RGB_G","RGB_B"],r=["XYZ_X","XYZ_Y","XYZ_Z"];for(let t of[...n,...r])if(!a.format.hasOwnProperty(t))throw new Error("GAMUT:: Cgats file must have the following data - "+PROPS.join(", "));return a.RGB=a.data.get(":",n.map(t=>a.format[t])),a.XYZ=a.data.get(":",r.map(t=>a.format[t])),Object.assign(a,e),G(a)}function G(t){t.gsv=[...new Set(t.RGB)].sort((t,e)=>t-e);const[e,a]=M(t.gsv),n=function(t,e,a){const n=new Map(a.map((t,e)=>[t,e])),r=a.length,o=([t,e,a])=>n.get(t)+r*(n.get(e)+r*n.get(a)),s=new Map(e.toJSON().map((t,e)=>[o(t),e]));return t.toJSON().map(t=>s.get(o(t)))}(a,t.RGB,t.gsv);if(n.indexOf(void 0)>=0)throw new Error("GAMUT:: Missing RGB data");return t.TRI=e.map(t=>n[t]),_(t)}function _(s){return s.RGBmax=s.gsv[s.gsv.length-1],s.XYZn=s.XYZ.get([...p(s.RGB,null,2)].indexOf(s.RGBmax),":"),s.caXYZn||(s.caXYZn=e([[.9642957,1,.8251046]])),s.caXYZ=function(a,s,i){const l=e([[.8951,.2664,-.1614],[-.7502,1.7135,.0367],[.0389,-.0685,1.0296]]).t,f=t(s,l),p=t(i,l),g=n(r(p,f,(t,e)=>t/e).t),c=o(t(l,g),l);return t(a,c)}(s.XYZ,s.XYZn,s.caXYZn),s.LAB=function(t,n){const o=r(t,n,(t,e)=>t/e).map(t=>t<=216/24389?t*(24389/3132)+16/116:Math.pow(t,1/3));return e([...a(o)].map(([t,e,a])=>[116*e-16,500*(t-e),200*(e-a)]))}(s.caXYZ,s.caXYZn),y(s)}function y(t){t.Lsteps||(t.Lsteps=100),t.hsteps||(t.hsteps=360);const{TRI:a,LAB:n,Lsteps:o,hsteps:s}=t,i=n.get(":",[1,2,0]),l=g(i.get([...a.get(":",0)],2),i.get([...a.get(":",1)],2),i.get([...a.get(":",2)],2)),f=p(i.get([...a.get(":",0)],2),i.get([...a.get(":",1)],2),i.get([...a.get(":",2)],2)),h=2*Math.PI/s,d=new Array(o);for(let t=0;t<o;t++){let n=100*(t+.5)/o,p=e([[0,0,n]]),g=(w=r(f,l,(t,e)=>t<=n&&n<e),[...w].map((t,e)=>[t,e]).filter(t=>t[0]).map(t=>t[1])),M=i.get([...a.get(g,0)],":"),R=i.get([...a.get(g,1)],":"),A=i.get([...a.get(g,2)],":"),B=r(R,M,(t,e)=>t-e),G=r(A,M,(t,e)=>t-e),_=r(p,M,(t,e)=>t-e),y=c(G,B,2),E=c(G,_,2),T=c(_,B,2);d[t]=S([...y.get(":",[0,1])],[...E.get(":",[0,1])],[...T.get(":",[0,1])],[...m(u(G,T),null,2)],s,h)}var w;return t.cylmap=d,t}function S(t,e,a,n,r,o){const s=n.length,i=new Array(r);for(let l=0;l<r;l++){const r=[],f=(l+.5)*o,p=Math.sin(f),g=Math.cos(f);let c,m,u,h;for(let o=0,i=0;o<s;o++,i+=2)c=1/(p*t[i]+g*t[i+1]),(h=c*n[o])>0&&(m=c*(p*e[i]+g*e[i+1]))>=0&&(u=c*(p*a[i]+g*a[i+1]))>=0&&m+u<=1&&r.push([Math.sign(c),h]);i[l]=r}return i}function E(t){let e=2*Math.PI/t.hsteps,a=100/t.Lsteps,n=0;for(let e=0;e<t.Lsteps;e++)for(let a=0;a<t.hsteps;a++){const r=t.cylmap[e][a];for(let t=0;t<r.length;t++)n+=r[t][0]*r[t][1]*r[t][1]}return n*a*e/2}function T(t,a){const n=2*Math.PI/t.hsteps,r=100/t.Lsteps*n/2,o=e(t.cylmap.map(t=>t.map(t=>{let e=0;for(let a of t)e+=a[0]*a[1]*a[1]*r;return e}))),s=h(l(1,t.hsteps),d(o).map(t=>Math.pow(2*t/n,.5))),i=w(s,a),f=e([[n/2,"::",n,2*Math.PI]]);return[u(f.map(Math.sin),i),u(f.map(Math.cos),i),i,m(o)]}const O={d50:[.3457,.3585],d55:[.3324,.3474],d60:[.32168,.33767],d65:[.3127,.329],d75:[.299,.3149]},b={default:{driveMapping:t=>t,gamma:2.4,black:null,blackRatio:0,steps:10,white:"d65",RGBxy:[[.64,.33],[.3,.6],[.15,.06]]},srgb:{white:"d65",RGBxy:[[.64,.33],[.3,.6],[.15,.06]],gamma:t=>t>.04045?Math.pow((200*t+11)/211,2.4):25*t/323},"bt.2020":{white:"d65",RGBxy:[[.708,.292],[.17,.797],[.131,.046]],gamma:2.4},"dci-p3":{white:[.314,.351],RGBxy:[[.68,.32],[.265,.69],[.15,.06]],gamma:2.4},"d65-p3":{white:"d65",RGBxy:[[.68,.32],[.265,.69],[.15,.06]],gamma:2.4},"d50-p3":{white:"d50",RGBxy:[[.68,.32],[.265,.69],[.15,.06]],gamma:2.4}};function v(n,r){r="string"==typeof n?Object.assign({},b.default,b[n.toLowerCase()],r):Object.assign({},b.default,n);let{white:s,RGBxy:i,gamma:f,black:p,blackRatio:g,steps:c,colorantXYZ:d,driveMapping:w}=r,A="function"==typeof f?f:t=>Math.pow(t,f),B=e([w([1,1,1])]);if(d)d=e(d);else{for(;"string"==typeof s;)s=O[s]||b[s].white;s=e([s]);let t=R(s),a=R(e(i)),n=o(t,a);d=u(a,n.t),B.length>3&&(d=h([d,t]))}let _=t(B,d),y=l(1,3);if(g){if(p)for(;"string"==typeof p;)p=O[p]||b[p].white;else p=s;y=R(p,_.get(0,1)/(1/g-1))}let S=M(e([0,":",c]))[1];const E=c+1;S=e([...new Map([...a(S)].map(([t,e,a])=>[t+E*(e+E*a),[t,e,a]])).values()]),S=S.map(t=>t/c);let T=S.map(A),v=e([...a(T)].map(w));return G({RGB:S,XYZ:m(t(v,d),y)})}export{B as fromCgats,y as fromTRILAB,_ as fromTRIXYZ,G as fromXYZ,E as gamutVolume,v as makeSynthetic,T as rings};
